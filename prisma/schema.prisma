// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String          @id @default(cuid())
//   name          String?
//   username      String?         @unique
//   email         String          @unique
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt
//   accounts      Account?
//   Authenticator Authenticator[]
//   Post          Post[]
//   sessions      Session[]
//   comments      Comment[]
// }

// model Account {
//   id                       String   @id @default(cuid())
//   userId                   String   @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String?  @db.Text
//   access_token             String?  @db.Text
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String?  @db.Text
//   session_state            String?
//   refresh_token_expires_in Int?
//   createdAt                DateTime @default(now())
//   updatedAt                DateTime @updatedAt
//   user                     User     @relation(fields: [userId], references: [id])

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model Post {
//   id          String   @id @default(cuid())
//   title       String   @db.VarChar(255)
//   description String   @db.VarChar(255)
//   userId      String
//   image       String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   user        User     @relation(fields: [userId], references: [id])

//   @@index([userId], map: "Post_userId_fkey")
// }

// model Comment {
//   id        String   @id @default(cuid())
//   postId    String
//   text      String   @db.VarChar(255)
//   userId    String
//   createdAt DateTime @default(now())
//   user      User     @relation(fields: [userId], references: [id])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])

//   @@index([userId])
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
//   user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?         @unique
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  authenticators Authenticator[]
  posts          Post[]
  sessions       Session[]
  comments       Comment[]
}

model Account {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @db.ObjectId
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String?
  accessToken           String?
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?
  sessionState          String?
  refreshTokenExpiresIn Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  userId      String   @db.ObjectId
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @id @map("_id") @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id])
}
